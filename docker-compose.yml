services:

  orchestrator:
    image: spring-security-keycloak-api:2.0.0
    env_file:
      - docker-back.env
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    container_name: my-orchestrator-webflux-keycloak-app
    ports:
      - '8084:8083'
    networks:
      - app_network
    depends_on:
      - keycloak

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.5
    container_name: keycloak_web
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
    command:
      - "start-dev"
      - "--import-realm"
    volumes:
      - type: bind
        source: ./src/main/resources/keycloak/import/realm-alchim.json
        target: /opt/keycloak/data/import/realm-alchim.json
        read_only: true
    ports:
      - '8283:8080'
      #8080 must be
    restart: always
    networks:
      - app_network

  client-backend-db:
    image: individual-api-web-jpa:1.0.0
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    container_name: my-web-app-jpa-db
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/postgresIndividualApi
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres

    ports:
      - '8088:8088'
    depends_on:
      postgres-db:
        condition: service_healthy
    networks:
      - app_network


  postgres-db:
    container_name: postgres-db
    image: postgres:17
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgresIndividualApi"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgresIndividualApi
      PGDATA: /var/lib/postgresql/data


networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:

#volumes:
#  postgres_data:
#    driver: local